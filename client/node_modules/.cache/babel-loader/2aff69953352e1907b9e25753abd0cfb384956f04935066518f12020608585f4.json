{"ast":null,"code":"import { ethers } from \"ethers\";\n\n// Adresse du contrat FanToken (déployé via Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n// ABI typique complète d'un contrat ERC20 (simplifiée mais fiable)\nexport const fanTokenAbi = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"account\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"symbol\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nexport const getTokenBalance = async account => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return {\n    balance: ethers.formatUnits(balance, 18),\n    symbol\n  };\n};","map":{"version":3,"names":["ethers","fanTokenAddress","fanTokenAbi","getTokenBalance","account","window","ethereum","provider","BrowserProvider","signer","getSigner","contract","Contract","balance","balanceOf","symbol","formatUnits"],"sources":["/home/debian/est-fanverse/client/src/utils/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n// Adresse du contrat FanToken (déployé via Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n// ABI typique complète d'un contrat ERC20 (simplifiée mais fiable)\nexport const fanTokenAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\nexport const getTokenBalance = async (account: string) => {\n  if (!window.ethereum) return null;\n\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return { balance: ethers.formatUnits(balance, 18), symbol };\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAO,MAAMC,eAAe,GAAG,4CAA4C;;AAE3E;AACA,OAAO,MAAMC,WAAW,GAAG,CACzB;EACE,QAAQ,EAAE,CACR;IACE,cAAc,EAAE,SAAS;IACzB,MAAM,EAAE,SAAS;IACjB,MAAM,EAAE;EACV,CAAC,CACF;EACD,MAAM,EAAE,WAAW;EACnB,SAAS,EAAE,CACT;IACE,cAAc,EAAE,SAAS;IACzB,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACV,CAAC,CACF;EACD,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,EAAE;EACZ,MAAM,EAAE,QAAQ;EAChB,SAAS,EAAE,CACT;IACE,cAAc,EAAE,QAAQ;IACxB,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACV,CAAC,CACF;EACD,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,CACF;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOC,OAAe,IAAK;EACxD,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE,OAAO,IAAI;EAEjC,MAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,eAAe,CAACH,MAAM,CAACC,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAQ,CAACX,eAAe,EAAEC,WAAW,EAAEO,MAAM,CAAC;EAE1E,MAAMI,OAAO,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAACV,OAAO,CAAC;EACjD,MAAMW,MAAM,GAAG,MAAMJ,QAAQ,CAACI,MAAM,CAAC,CAAC;EACtC,OAAO;IAAEF,OAAO,EAAEb,MAAM,CAACgB,WAAW,CAACH,OAAO,EAAE,EAAE,CAAC;IAAEE;EAAO,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}