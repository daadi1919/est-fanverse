{"ast":null,"code":"import { ethers } from \"ethers\";\n\n// ‚úÖ Adresses des contrats d√©ploy√©s localement (via Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ‚úÖ ABI simplifi√©e mais fonctionnelle d‚Äôun contrat ERC20\nexport const fanTokenAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\n// ‚úÖ ABI du contrat FanNFT avec mintNFT\nexport const fanNFTAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"recipient\",\n    type: \"address\"\n  }, {\n    internalType: \"string\",\n    name: \"tokenURI\",\n    type: \"string\"\n  }],\n  name: \"mintNFT\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\n\n// üîÅ Lire le solde de $TARAJI\nexport const getTokenBalance = async account => {\n  try {\n    if (!window.ethereum) throw new Error(\"MetaMask non d√©tect√©\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n    const balance = await contract.balanceOf(account);\n    const symbol = await contract.symbol();\n    return {\n      balance: ethers.formatUnits(balance, 18),\n      symbol\n    };\n  } catch (error) {\n    console.error(\"Erreur lecture solde :\", error);\n    return null;\n  }\n};\n\n// üé® Minter un NFT √† l'utilisateur connect√©\nexport const mintNFT = async (account, tokenURI) => {\n  try {\n    if (!window.ethereum) throw new Error(\"MetaMask non d√©tect√©\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n    const tx = await contract.mintNFT(account, tokenURI);\n    await tx.wait(); // Attente de confirmation minage\n    return tx;\n  } catch (error) {\n    console.error(\"Erreur mint NFT :\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ethers","fanTokenAddress","fanNFTAddress","fanTokenAbi","inputs","internalType","name","type","outputs","stateMutability","fanNFTAbi","getTokenBalance","account","window","ethereum","Error","provider","BrowserProvider","signer","getSigner","contract","Contract","balance","balanceOf","symbol","formatUnits","error","console","mintNFT","tokenURI","tx","wait"],"sources":["/home/debian/est-fanverse/client/src/utils/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n// ‚úÖ Adresses des contrats d√©ploy√©s localement (via Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ‚úÖ ABI simplifi√©e mais fonctionnelle d‚Äôun contrat ERC20\nexport const fanTokenAbi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\n\n// ‚úÖ ABI du contrat FanNFT avec mintNFT\nexport const fanNFTAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"string\", name: \"tokenURI\", type: \"string\" }\n    ],\n    name: \"mintNFT\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }\n];\n\n// üîÅ Lire le solde de $TARAJI\nexport const getTokenBalance = async (account: string) => {\n  try {\n    if (!window.ethereum) throw new Error(\"MetaMask non d√©tect√©\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n    const balance = await contract.balanceOf(account);\n    const symbol = await contract.symbol();\n    return {\n      balance: ethers.formatUnits(balance, 18),\n      symbol\n    };\n  } catch (error) {\n    console.error(\"Erreur lecture solde :\", error);\n    return null;\n  }\n};\n\n// üé® Minter un NFT √† l'utilisateur connect√©\nexport const mintNFT = async (account: string, tokenURI: string) => {\n  try {\n    if (!window.ethereum) throw new Error(\"MetaMask non d√©tect√©\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n    const tx = await contract.mintNFT(account, tokenURI);\n    await tx.wait(); // Attente de confirmation minage\n    return tx;\n  } catch (error) {\n    console.error(\"Erreur mint NFT :\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}