{"ast":null,"code":"import { ethers } from \"ethers\";\n\n// Adresse des contrats (déployés en local avec Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ABI du contrat FanToken (ERC20)\nexport const fanTokenAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\n// ABI du contrat FanNFT (ERC721)\nexport const fanNFTAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"recipient\",\n    type: \"address\"\n  }, {\n    internalType: \"string\",\n    name: \"tokenURI\",\n    type: \"string\"\n  }],\n  name: \"mintNFT\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"tokenURI\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"index\",\n    type: \"uint256\"\n  }],\n  name: \"tokenOfOwnerByIndex\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\n// Lire le solde de tokens\nexport const getTokenBalance = async account => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return {\n    balance: ethers.formatUnits(balance, 18),\n    symbol\n  };\n};\n\n// Minter un NFT\nexport const mintNFT = async (account, tokenURI) => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n  const tx = await contract.mintNFT(account, tokenURI);\n  await tx.wait();\n  return tx;\n};\n\n// Obtenir tous les NFTs mintés par un utilisateur\nexport const getMintedNFTs = async account => {\n  if (!window.ethereum) return [];\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n  const balance = await contract.balanceOf(account);\n  const uris = [];\n  for (let i = 0; i < balance; i++) {\n    const tokenId = await contract.tokenOfOwnerByIndex(account, i);\n    const uri = await contract.tokenURI(tokenId);\n    uris.push(uri);\n  }\n  return uris;\n};","map":{"version":3,"names":["ethers","fanTokenAddress","fanNFTAddress","fanTokenAbi","inputs","internalType","name","type","outputs","stateMutability","fanNFTAbi","getTokenBalance","account","window","ethereum","provider","BrowserProvider","signer","getSigner","contract","Contract","balance","balanceOf","symbol","formatUnits","mintNFT","tokenURI","tx","wait","getMintedNFTs","uris","i","tokenId","tokenOfOwnerByIndex","uri","push"],"sources":["/home/debian/est-fanverse/client/src/utils/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n// Adresse des contrats (déployés en local avec Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ABI du contrat FanToken (ERC20)\nexport const fanTokenAbi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\n\n// ABI du contrat FanNFT (ERC721)\nexport const fanNFTAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"recipient\", type: \"address\" },\n      { internalType: \"string\", name: \"tokenURI\", type: \"string\" }\n    ],\n    name: \"mintNFT\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"tokenURI\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"uint256\", name: \"index\", type: \"uint256\" }\n    ],\n    name: \"tokenOfOwnerByIndex\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\n\n// Lire le solde de tokens\nexport const getTokenBalance = async (account: string) => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return { balance: ethers.formatUnits(balance, 18), symbol };\n};\n\n// Minter un NFT\nexport const mintNFT = async (account: string, tokenURI: string) => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n  const tx = await contract.mintNFT(account, tokenURI);\n  await tx.wait();\n  return tx;\n};\n\n// Obtenir tous les NFTs mintés par un utilisateur\nexport const getMintedNFTs = async (account: string): Promise<string[]> => {\n  if (!window.ethereum) return [];\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n\n  const balance = await contract.balanceOf(account);\n  const uris: string[] = [];\n\n  for (let i = 0; i < balance; i++) {\n    const tokenId = await contract.tokenOfOwnerByIndex(account, i);\n    const uri = await contract.tokenURI(tokenId);\n    uris.push(uri);\n  }\n\n  return uris;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}