{"ast":null,"code":"import { ethers } from \"ethers\";\n\n// Adresse des contrats (d√©ploy√©s en local avec Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ABI du contrat FanToken (ERC20)\nexport const fanTokenAbi = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"account\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"symbol\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\n\n// ABI du contrat FanNFT (ERC721 avec mintNFT)\nexport const fanNFTAbi = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"recipient\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"tokenURI\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"mintNFT\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}];\n\n// üîÅ Lire le solde de $TARAJI\nexport const getTokenBalance = async account => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return {\n    balance: ethers.formatUnits(balance, 18),\n    symbol\n  };\n};\n\n// üß™ Minter un NFT pour l'utilisateur connect√©\nexport const mintNFT = async (account, tokenURI) => {\n  if (!window.ethereum) return null;\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n  const tx = await contract.mintNFT(account, tokenURI);\n  await tx.wait(); // Attendre que le mint soit min√©\n  return tx;\n};","map":{"version":3,"names":["ethers","fanTokenAddress","fanNFTAddress","fanTokenAbi","fanNFTAbi","getTokenBalance","account","window","ethereum","provider","BrowserProvider","signer","getSigner","contract","Contract","balance","balanceOf","symbol","formatUnits","mintNFT","tokenURI","tx","wait"],"sources":["/home/debian/est-fanverse/client/src/utils/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n// Adresse des contrats (d√©ploy√©s en local avec Hardhat)\nexport const fanTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport const fanNFTAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n// ABI du contrat FanToken (ERC20)\nexport const fanTokenAbi = [\n  {\n    \"inputs\": [{ \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" }],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\n// ABI du contrat FanNFT (ERC721 avec mintNFT)\nexport const fanNFTAbi = [\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"recipient\", \"type\": \"address\" },\n      { \"internalType\": \"string\", \"name\": \"tokenURI\", \"type\": \"string\" }\n    ],\n    \"name\": \"mintNFT\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// üîÅ Lire le solde de $TARAJI\nexport const getTokenBalance = async (account: string) => {\n  if (!window.ethereum) return null;\n\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanTokenAddress, fanTokenAbi, signer);\n\n  const balance = await contract.balanceOf(account);\n  const symbol = await contract.symbol();\n  return {\n    balance: ethers.formatUnits(balance, 18),\n    symbol\n  };\n};\n\n// üß™ Minter un NFT pour l'utilisateur connect√©\nexport const mintNFT = async (account: string, tokenURI: string) => {\n  if (!window.ethereum) return null;\n\n  const provider = new ethers.BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new ethers.Contract(fanNFTAddress, fanNFTAbi, signer);\n\n  const tx = await contract.mintNFT(account, tokenURI);\n  await tx.wait(); // Attendre que le mint soit min√©\n  return tx;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAO,MAAMC,eAAe,GAAG,4CAA4C;AAC3E,OAAO,MAAMC,aAAa,GAAG,4CAA4C;;AAEzE;AACA,OAAO,MAAMC,WAAW,GAAG,CACzB;EACE,QAAQ,EAAE,CAAC;IAAE,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,SAAS;IAAE,MAAM,EAAE;EAAU,CAAC,CAAC;EAC/E,MAAM,EAAE,WAAW;EACnB,SAAS,EAAE,CAAC;IAAE,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAU,CAAC,CAAC;EACzE,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,EAAE;EACZ,MAAM,EAAE,QAAQ;EAChB,SAAS,EAAE,CAAC;IAAE,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EACvE,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,CACvB;EACE,QAAQ,EAAE,CACR;IAAE,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,WAAW;IAAE,MAAM,EAAE;EAAU,CAAC,EACrE;IAAE,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,UAAU;IAAE,MAAM,EAAE;EAAS,CAAC,CACnE;EACD,MAAM,EAAE,SAAS;EACjB,SAAS,EAAE,CAAC;IAAE,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAU,CAAC,CAAC;EACzE,iBAAiB,EAAE,YAAY;EAC/B,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,OAAe,IAAK;EACxD,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE,OAAO,IAAI;EAEjC,MAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,eAAe,CAACH,MAAM,CAACC,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,QAAQ,CAACb,eAAe,EAAEE,WAAW,EAAEQ,MAAM,CAAC;EAE1E,MAAMI,OAAO,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAACV,OAAO,CAAC;EACjD,MAAMW,MAAM,GAAG,MAAMJ,QAAQ,CAACI,MAAM,CAAC,CAAC;EACtC,OAAO;IACLF,OAAO,EAAEf,MAAM,CAACkB,WAAW,CAACH,OAAO,EAAE,EAAE,CAAC;IACxCE;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG,MAAAA,CAAOb,OAAe,EAAEc,QAAgB,KAAK;EAClE,IAAI,CAACb,MAAM,CAACC,QAAQ,EAAE,OAAO,IAAI;EAEjC,MAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,eAAe,CAACH,MAAM,CAACC,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,QAAQ,CAACZ,aAAa,EAAEE,SAAS,EAAEO,MAAM,CAAC;EAEtE,MAAMU,EAAE,GAAG,MAAMR,QAAQ,CAACM,OAAO,CAACb,OAAO,EAAEc,QAAQ,CAAC;EACpD,MAAMC,EAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EACjB,OAAOD,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}